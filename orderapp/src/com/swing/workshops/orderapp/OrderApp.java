/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.swing.workshops.orderappwithcheckbox;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */
public class OrderApp extends javax.swing.JFrame {

    Map<JCheckBox, Integer> menuVariableList = new LinkedHashMap<>();
    static Map<JCheckBox, Float> orderList = new LinkedHashMap<>();
    static ArrayList orderLable = new ArrayList<>();
    static ArrayList prices = new ArrayList<>();
    int firstOrder = 0;

    public void menuVariableList() {
        menuVariableList.put(cobanSalati, 1);
        menuVariableList.put(cola, 1);
        menuVariableList.put(isgender, 1);
        menuVariableList.put(merci, 1);
        menuVariableList.put(mimoza, 1);
        menuVariableList.put(paytaxtSalati, 1);
        menuVariableList.put(plov, 1);
        menuVariableList.put(sirab, 1);
        menuVariableList.put(su, 1);
    }

    /**
     * Creates new form OrderApp
     */
    public OrderApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        isgender = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        cookingLable = new javax.swing.JLabel();
        merci = new javax.swing.JCheckBox();
        plov = new javax.swing.JCheckBox();
        kabab = new javax.swing.JCheckBox();
        lableSalad = new javax.swing.JLabel();
        cobanSalati = new javax.swing.JCheckBox();
        paytaxtSalati = new javax.swing.JCheckBox();
        lableDrink = new javax.swing.JLabel();
        mimoza = new javax.swing.JCheckBox();
        su = new javax.swing.JCheckBox();
        sirab = new javax.swing.JCheckBox();
        cola = new javax.swing.JCheckBox();
        registerOrder = new javax.swing.JButton();
        checkedOrders = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sifariş");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        isgender.setText("İsgəndər");
        isgender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isgenderActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText("Menyu");

        cookingLable.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        cookingLable.setText("Yeməklər");

        merci.setText("Mərci");
        merci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merciActionPerformed(evt);
            }
        });

        plov.setText("Plov");
        plov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plovActionPerformed(evt);
            }
        });

        kabab.setText("Kabab");
        kabab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kababActionPerformed(evt);
            }
        });

        lableSalad.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lableSalad.setText("Salatlar");

        cobanSalati.setText("Çoban salatı");
        cobanSalati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobanSalatiActionPerformed(evt);
            }
        });

        paytaxtSalati.setText("Paytaxt salatı");
        paytaxtSalati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paytaxtSalatiActionPerformed(evt);
            }
        });

        lableDrink.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lableDrink.setText("İçkilər");

        mimoza.setText("Mimoza");
        mimoza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mimozaActionPerformed(evt);
            }
        });

        su.setText("Adi su");
        su.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suActionPerformed(evt);
            }
        });

        sirab.setText("Sirab");
        sirab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sirabActionPerformed(evt);
            }
        });

        cola.setText("Cola");
        cola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colaActionPerformed(evt);
            }
        });

        registerOrder.setText("Sifarişi qeydə al");
        registerOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerOrderActionPerformed(evt);
            }
        });

        checkedOrders.setText("Sifarişlər : ");
        checkedOrders.setMaximumSize(new java.awt.Dimension(4000, 4000));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkedOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(151, 151, 151))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(registerOrder)
                                .addGap(26, 26, 26))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cookingLable)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(merci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(isgender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(kabab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(plov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lableSalad, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cobanSalati, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(mimoza, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(paytaxtSalati, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(76, 76, 76)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lableDrink)
                                    .addComponent(su, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                    .addComponent(sirab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGap(0, 41, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cookingLable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lableSalad)
                    .addComponent(lableDrink))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isgender)
                    .addComponent(cobanSalati)
                    .addComponent(su))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(merci)
                    .addComponent(paytaxtSalati)
                    .addComponent(sirab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plov)
                    .addComponent(mimoza)
                    .addComponent(cola))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kabab)
                .addGap(18, 18, 18)
                .addComponent(registerOrder)
                .addGap(18, 18, 18)
                .addComponent(checkedOrders, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void addOrder(String orderName, JCheckBox box) {
        try {
            float servings;
            servings = Float.valueOf(JOptionPane.showInputDialog(rootPane, "Miqdarı daxil edin", "Miqdar", WIDTH));
            String servingCountControl = String.valueOf(servings);
            servingCountControl = servingCountControl.substring(servingCountControl.indexOf("."));

            if (!servingCountControl.equals(".0") && !servingCountControl.equals(".5") || servings == 0.0) {
                JOptionPane.showMessageDialog(rootPane, "Pors sayı minumum 0.5 ilə, maksimumu tam ədəd (rəqəm) ilə artmalıdır.", "Xəta", HEIGHT);
                box.setSelected(true);
                addOrder(orderName, box);
                return;
            }

            firstOrder++;
            if (firstOrder > 1) {
                orderLable.add(", ");
            }

            orderLable.add(orderName);
            orderList.put(box, servings);
            prices.add(firstOrder + firstOrder * 0.1);
            //System.out.println(prices.get(firstOrder - 1));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Düzgün məlumat daxil edin !", "Xəta", HEIGHT);
            addOrder(orderName, box);
        } catch (NullPointerException ex) {
            box.setSelected(false);
        }
    }

    public void deleteOrder(String orderName, JCheckBox box) {
        if (!box.isSelected()) {
            orderList.remove(box);
            /*
            int index = orderLable.indexOf(orderName);


            if (firstOrder > 1 && orderLable.get(index - 1).equals(",")) {
                orderLable.remove(index - 1);
            } else if (firstOrder > 1 &&  orderLable.get(index + 1).equals(",")) {
                orderLable.remove(index + 1);
            }
            orderLable.remove(index);
            firstOrder--;
             */

            for (int i = 0; i < orderLable.size(); i++) {
                if (orderName.equals(orderLable.get(i))) {
                    //System.out.println("size : " + orderLable.size());
                    //System.out.println("Data INDEX : " + orderLable.get(i));
                    //System.out.println("old i : " + i);
                    if (i == orderLable.size()) {
                        //System.out.println("ok");
                        i = i - 1;
                    }
                    //System.out.println("new i : " + i);
                    if (firstOrder > 1) {
                        //  System.out.println(", INDEX : " + orderLable.get(i));
                        orderLable.remove(orderLable.remove(i));
                        if (i == orderLable.size()) {
                            i -= 1;
                        }
                    }
                    //System.out.println("Data INDEX : " + orderLable.get(i));
                    orderLable.remove(i);
                    firstOrder--;
                    break;
                }
            }
        } else {

        }
    }

    public void orderLableIterator(JCheckBox servingCount) {
        String orderLableData = "";
        for (int i = 0; i < orderLable.size(); i++) {
            orderLableData += String.valueOf(orderLable.get(i));
        }
        checkedOrders.setText(orderLableData);
    }

    public void equalsControl(String orderName) {
        for (int i = 0; i < orderLable.size(); i++) {
            if (orderLable.get(i).equals(orderName)) {
                orderLable.remove(i);
                break;
            }
        }
    }

    private void kababActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kababActionPerformed
        if (kabab.isSelected()) {
            addOrder("Kabab", kabab);
            orderLableIterator(kabab);
        } else {
            deleteOrder("Kabab", kabab);
            orderLableIterator(kabab);
        }
    }//GEN-LAST:event_kababActionPerformed

    private void isgenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isgenderActionPerformed
        if (isgender.isSelected()) {
            addOrder("İsgəndər", isgender);
            orderLableIterator(isgender);
        } else {
            deleteOrder("İsgəndər", isgender);
            orderLableIterator(isgender);
        }
    }//GEN-LAST:event_isgenderActionPerformed

    private void merciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merciActionPerformed
        if (merci.isSelected()) {
            addOrder("Mərci", merci);
            orderLableIterator(merci);
        } else {
            deleteOrder("Mərci", merci);
            orderLableIterator(merci);
        }
    }//GEN-LAST:event_merciActionPerformed

    private void plovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plovActionPerformed
        if (plov.isSelected()) {
            addOrder("Plov", plov);
            orderLableIterator(plov);
        } else {
            deleteOrder("Plov", plov);
            orderLableIterator(plov);
        }
     }//GEN-LAST:event_plovActionPerformed

    private void cobanSalatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobanSalatiActionPerformed
        if (cobanSalati.isSelected()) {
            addOrder("Çoban Salatı", cobanSalati);
            orderLableIterator(cobanSalati);
        } else {
            deleteOrder("Çoban Salatı", cobanSalati);
            orderLableIterator(cobanSalati);
        }
    }//GEN-LAST:event_cobanSalatiActionPerformed

    private void paytaxtSalatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paytaxtSalatiActionPerformed
        if (paytaxtSalati.isSelected()) {
            addOrder("Paytaxt Salatı", paytaxtSalati);
            orderLableIterator(paytaxtSalati);
        } else {
            deleteOrder("Paytaxt Salatı", paytaxtSalati);
            orderLableIterator(paytaxtSalati);
        }
    }//GEN-LAST:event_paytaxtSalatiActionPerformed

    private void mimozaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mimozaActionPerformed
        if (mimoza.isSelected()) {
            addOrder("Mimoza", mimoza);
            orderLableIterator(mimoza);
        } else {
            deleteOrder("Mimoza", mimoza);
            orderLableIterator(mimoza);
        }
    }//GEN-LAST:event_mimozaActionPerformed

    private void suActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suActionPerformed
        if (su.isSelected()) {
            addOrder("Su", su);
            orderLableIterator(su);
        } else {
            deleteOrder("Su", su);
            orderLableIterator(su);
        }
    }//GEN-LAST:event_suActionPerformed

    private void sirabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sirabActionPerformed
        if (sirab.isSelected()) {
            addOrder("Sirab", sirab);
            orderLableIterator(sirab);
        } else {
            deleteOrder("Sirab", sirab);
            orderLableIterator(sirab);
        }
    }//GEN-LAST:event_sirabActionPerformed

    private void colaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colaActionPerformed
        if (cola.isSelected()) {
            addOrder("Cola", cola);
            orderLableIterator(cola);
        } else {
            deleteOrder("Cola", cola);
            orderLableIterator(cola);
        }
    }//GEN-LAST:event_colaActionPerformed

    private void registerOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerOrderActionPerformed
        String message = "", currentOrderName = "";
        float total = 0;
        ArrayList<Float> servingCounts = new ArrayList<>();
        int increased = 0, orderIndex = 1;

        orderList.entrySet().forEach((Map.Entry<JCheckBox, Float> order) -> {
            servingCounts.add(order.getValue());
        });

        for (int i = 0; i < orderList.size(); i++) {
            message += orderLable.get(orderIndex) + " - " + String.valueOf(prices.get(i)) + " AZN * " + servingCounts.get(i) + "\n";
            currentOrderName = (String) orderLable.get(orderIndex);
            System.out.println("Current Msg : " + currentOrderName);
            total += Float.valueOf(String.valueOf(OrderApp.prices.get(i))) * servingCounts.get(i);
            orderIndex += 2;
        }

        DecimalFormat df = new DecimalFormat(".##");
        total = Float.valueOf(df.format(total));
        message += String.valueOf("Ümumi məbləğ : " + total + " AZN");
        JOptionPane.showMessageDialog(this, message);

    }//GEN-LAST:event_registerOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        orderLable.add("Sifarişlər : ");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderApp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderApp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderApp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderApp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel checkedOrders;
    private javax.swing.JCheckBox cobanSalati;
    private javax.swing.JCheckBox cola;
    private javax.swing.JLabel cookingLable;
    private javax.swing.JCheckBox isgender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox kabab;
    private javax.swing.JLabel lableDrink;
    private javax.swing.JLabel lableSalad;
    private javax.swing.JCheckBox merci;
    private javax.swing.JCheckBox mimoza;
    private javax.swing.JCheckBox paytaxtSalati;
    private javax.swing.JCheckBox plov;
    private javax.swing.JButton registerOrder;
    private javax.swing.JCheckBox sirab;
    private javax.swing.JCheckBox su;
    // End of variables declaration//GEN-END:variables
}
